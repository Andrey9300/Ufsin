<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Issledovanie extends \AppBundle\Entity\Issledovanie implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'nomer', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'all_count', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'ne_sootv', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'pokazatelsIssledovaniy', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'organization', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'issledovanieType');
        }

        return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'nomer', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'all_count', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'ne_sootv', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'pokazatelsIssledovaniy', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'organization', '' . "\0" . 'AppBundle\\Entity\\Issledovanie' . "\0" . 'issledovanieType');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Issledovanie $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomer($nomer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomer', array($nomer));

        return parent::setNomer($nomer);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomer', array());

        return parent::getNomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAllCount($allCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllCount', array($allCount));

        return parent::setAllCount($allCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllCount', array());

        return parent::getAllCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setNeSootv($neSootv)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNeSootv', array($neSootv));

        return parent::setNeSootv($neSootv);
    }

    /**
     * {@inheritDoc}
     */
    public function getNeSootv()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNeSootv', array());

        return parent::getNeSootv();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganization(\AppBundle\Entity\Organization $organization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganization', array($organization));

        return parent::setOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganization', array());

        return parent::getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    public function addPokazatelsIssledovaniy(\AppBundle\Entity\PokazatelsIssledovaniya $pokazatelsIssledovaniy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPokazatelsIssledovaniy', array($pokazatelsIssledovaniy));

        return parent::addPokazatelsIssledovaniy($pokazatelsIssledovaniy);
    }

    /**
     * {@inheritDoc}
     */
    public function removePokazatelsIssledovaniy(\AppBundle\Entity\PokazatelsIssledovaniya $pokazatelsIssledovaniy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePokazatelsIssledovaniy', array($pokazatelsIssledovaniy));

        return parent::removePokazatelsIssledovaniy($pokazatelsIssledovaniy);
    }

    /**
     * {@inheritDoc}
     */
    public function getPokazatelsIssledovaniy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPokazatelsIssledovaniy', array());

        return parent::getPokazatelsIssledovaniy();
    }

    /**
     * {@inheritDoc}
     */
    public function setIssledovanieType(\AppBundle\Entity\IssledovanieType $issledovanieType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIssledovanieType', array($issledovanieType));

        return parent::setIssledovanieType($issledovanieType);
    }

    /**
     * {@inheritDoc}
     */
    public function getIssledovanieType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIssledovanieType', array());

        return parent::getIssledovanieType();
    }

    /**
     * {@inheritDoc}
     */
    public function addPokazatels(\AppBundle\Entity\PokazatelsIssledovaniya $pokazatelsIssledovaniya)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPokazatels', array($pokazatelsIssledovaniya));

        return parent::addPokazatels($pokazatelsIssledovaniya);
    }

}
