<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DogovorFkuz extends \AppBundle\Entity\DogovorFkuz implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'nomer', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'organization_posrednik', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'summa', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'fkuz', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'dogovorType');
        }

        return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'nomer', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'organization_posrednik', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'summa', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'fkuz', '' . "\0" . 'AppBundle\\Entity\\DogovorFkuz' . "\0" . 'dogovorType');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DogovorFkuz $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomer($nomer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomer', array($nomer));

        return parent::setNomer($nomer);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomer', array());

        return parent::getNomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganizationPosrednik($organizationPosrednik)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganizationPosrednik', array($organizationPosrednik));

        return parent::setOrganizationPosrednik($organizationPosrednik);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganizationPosrednik()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganizationPosrednik', array());

        return parent::getOrganizationPosrednik();
    }

    /**
     * {@inheritDoc}
     */
    public function setSumma($summa)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSumma', array($summa));

        return parent::setSumma($summa);
    }

    /**
     * {@inheritDoc}
     */
    public function getSumma()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSumma', array());

        return parent::getSumma();
    }

    /**
     * {@inheritDoc}
     */
    public function setFkuz(\AppBundle\Entity\Fkuz $fkuz = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFkuz', array($fkuz));

        return parent::setFkuz($fkuz);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkuz()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkuz', array());

        return parent::getFkuz();
    }

    /**
     * {@inheritDoc}
     */
    public function setDogovorType(\AppBundle\Entity\DogovorType $dogovorType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDogovorType', array($dogovorType));

        return parent::setDogovorType($dogovorType);
    }

    /**
     * {@inheritDoc}
     */
    public function getDogovorType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDogovorType', array());

        return parent::getDogovorType();
    }

}
